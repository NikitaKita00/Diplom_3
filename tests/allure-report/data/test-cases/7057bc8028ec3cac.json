{
  "uid" : "7057bc8028ec3cac",
  "name" : "Ввод почты и клик по кнопке 'Восстановить'",
  "fullName" : "test_password_recovery.TestPasswordRecovery#test_email_input_and_recovery",
  "historyId" : "39936536f9de3ddc6c2b8eb5727a172d",
  "time" : {
    "start" : 1757249820480,
    "stop" : 1757249834025,
    "duration" : 13545
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <tests.test_password_recovery.TestPasswordRecovery object at 0x000002800502D8B0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba1f789debb99b5c48856a1b5be54a56\")>\n\n    @allure.title(\"Ввод почты и клик по кнопке 'Восстановить'\")\n    def test_email_input_and_recovery(self, driver):\n        main_page = MainPage(driver)\n        login_page = LoginPage(driver)\n    \n        main_page.go_to_site()\n        time.sleep(2)\n    \n        main_page.click_personal_account()  # Нажимаем \"Личный Кабинет\"\n    \n        # Должны перейти на страницу логина\n        assert login_page.is_login_page(), \"Не удалось перейти на страницу входа\"\n    \n        # Нажимаем \"Восстановить пароль\"\n        login_page.go_to_forgot_password()\n    \n        forgot_page = ForgotPasswordPage(driver)\n        forgot_page.enter_email(TestData.EMAIL)\n>       forgot_page.click_recover_button()\n\ntest_password_recovery.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\forgot_password_page.py:16: in click_recover_button\n    self.wait_for_url_contains(\"login\")\n..\\pages\\base_page.py:48: in wait_for_url_contains\n    WebDriverWait(self.driver, timeout).until(EC.url_contains(text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ba1f789debb99b5c48856a1b5be54a56\")>, method = <function url_contains.<locals>._predicate at 0x000002800134E480>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1757249819243,
      "stop" : 1757249820479,
      "duration" : 1236
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <tests.test_password_recovery.TestPasswordRecovery object at 0x000002800502D8B0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba1f789debb99b5c48856a1b5be54a56\")>\n\n    @allure.title(\"Ввод почты и клик по кнопке 'Восстановить'\")\n    def test_email_input_and_recovery(self, driver):\n        main_page = MainPage(driver)\n        login_page = LoginPage(driver)\n    \n        main_page.go_to_site()\n        time.sleep(2)\n    \n        main_page.click_personal_account()  # Нажимаем \"Личный Кабинет\"\n    \n        # Должны перейти на страницу логина\n        assert login_page.is_login_page(), \"Не удалось перейти на страницу входа\"\n    \n        # Нажимаем \"Восстановить пароль\"\n        login_page.go_to_forgot_password()\n    \n        forgot_page = ForgotPasswordPage(driver)\n        forgot_page.enter_email(TestData.EMAIL)\n>       forgot_page.click_recover_button()\n\ntest_password_recovery.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\forgot_password_page.py:16: in click_recover_button\n    self.wait_for_url_contains(\"login\")\n..\\pages\\base_page.py:48: in wait_for_url_contains\n    WebDriverWait(self.driver, timeout).until(EC.url_contains(text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ba1f789debb99b5c48856a1b5be54a56\")>, method = <function url_contains.<locals>._predicate at 0x000002800134E480>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5694e379d3d4106e",
      "name" : "screenshot",
      "source" : "5694e379d3d4106e.png",
      "type" : "image/png",
      "size" : 39178
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1757249834275,
      "stop" : 1757249836522,
      "duration" : 2247
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Восстановление пароля"
  }, {
    "name" : "suite",
    "value" : "test_password_recovery"
  }, {
    "name" : "subSuite",
    "value" : "TestPasswordRecovery"
  }, {
    "name" : "host",
    "value" : "RUMSKLCG1160Z8S"
  }, {
    "name" : "thread",
    "value" : "26324-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_password_recovery"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "driver",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7057bc8028ec3cac.json",
  "parameterValues" : [ "'chrome'" ]
}